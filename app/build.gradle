apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'jacoco-android'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.worldsnas.aio"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug{
            testCoverageEnabled true
        }
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //noinspection GradleDependency
    implementation 'androidx.appcompat:appcompat:1.0.0-beta01'
    implementation 'androidx.core:core-ktx:1.1.0-alpha05'
    testImplementation 'junit:junit:4.12'
    //noinspection GradleDependency
    androidTestImplementation 'androidx.test:runner:1.1.0-alpha4'
    //noinspection GradleDependency
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0-alpha4'
}


//project.afterEvaluate {
//    //Gather build type and product flavor names in a list
//    def buildTypes = android.buildTypes.collect { type -> type.name }
//    def productFlavors = android.productFlavors.collect { flavor -> flavor.name }
//    if (!productFlavors) productFlavors.add('')
//
//    productFlavors.each { productFlavorName ->
//        buildTypes.each { buildTypeName ->
//
//            //Define the sourceName and the sourcePath.
//            def sourceName, sourcePath
//            if (!productFlavorName) {
//                sourceName = sourcePath = "${buildTypeName}"
//            } else {
//                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
//                sourcePath = "${productFlavorName}/${buildTypeName}"
//            }
//
//            def testTaskName = "test${sourceName.capitalize()}UnitTest"
//
//            task "create${sourceName.capitalize()}UnitTestCoverageReport"(type: JacocoReport, dependsOn: "$testTaskName") {
//
//                group = "Reporting"
//                description =
//                        "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."
//
//                reports {
////                    removed for faster builds
////                    xml.enabled true
////                    html.enabled true
//                }
//
//                //Directory where the compiled class files are
//                classDirectories =
//                        fileTree(dir: "${project.buildDir}/intermediates/classes/${sourcePath}",
//                                excludes: ['**/R.class',
//                                           '**/BR.class',
//                                           '**/R$*.class',
//                                           '**/*$ViewInjector*.*',
//                                           '**/*$ViewBinder*.*',
//                                           '**/BuildConfig.*',
//                                           'android/**',
//                                           '**/Manifest*.*',
//                                           '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
//                                           '**/*Module.*', // Modules for Dagger.
//                                           '**/*Dagger*.*', // Dagger auto-generated code.
//                                           '**/*MembersInjector*.*', // Dagger auto-generated code.
//                                           '**/*_Provide*Factory*.*',
//                                           '**/*_Factory.*', //Dagger auto-generated code
//                                           '**/*$*$*.*', // Anonymous classes generated by kotlin
//                                           '**/*Activity.class' //exclude activities
//                                ])
//
//                sourceDirectories = files(["src/main/java",
//                                           "src/main/kotlin",
//                                           "src/$productFlavorName/java",
//                                           "src/$buildTypeName/java"])
//
//                executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")
//            }
//        }
//    }
//}