apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'jacoco-android'

android {
    compileSdkVersion 28
    defaultConfig {
        archivesBaseName = "AIO"
        applicationId "com.worldsnas.aio"
        minSdkVersion projectMinSdkVersion
        targetSdkVersion projectTargetSdkVersion
        versionCode 21000001
        versionName "0.0.1"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        buildConfigField "String", "API_KEY", "\"$movieDBApiKey\""
    }
    signingConfigs {
        release {
            storeFile file("/aio-key.jks")
            storePassword "$keyStorePass"
            keyAlias "$aioAlias"
            keyPassword "$keyPass"
        }
    }
    buildTypes {
        release {
            debuggable isReleaseDebuggable
            minifyEnabled isReleaseMinify
            shrinkResources true
            multiDexEnabled isReleaseMultiDex
            proguardFiles(getDefaultProguardFile("proguard-android.txt"),
                    "$proguardFileAddress")
            signingConfig signingConfigs.release
        }
        debug{
            ext.alwaysUpdateBuildId = false
            shrinkResources false
            debuggable isDebugDebuggable
            minifyEnabled isDebugMinify
            multiDexEnabled isDebugMultiDex
            proguardFiles(getDefaultProguardFile("proguard-android.txt"),
                    "$proguardFileAddress")
//            testCoverageEnabled true
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def date = new Date()
            def formattedDate = date.format('dd.MM.yy-HH.mm')
            outputFileName = output.outputFile.name.replace(".apk", "-v${variant.versionName}-${formattedDate}.apk")
        }
    }
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
    packagingOptions {
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
    }
    androidExtensions {
        defaultCacheImplementation = "SPARSE_ARRAY"
        experimental = true
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation kotlinStd8

    implementation(project(":core"))

    implementation dagger
    kapt daggerCompiler

    //noinspection GradleDependency
    implementation compat
    implementation coreKts
    testImplementation junit
    //noinspection GradleDependency
    androidTestImplementation supportTestRunner
    //noinspection GradleDependency
    androidTestImplementation espressoCore
}


project.afterEvaluate {
    //Gather build type and product flavor names in a list
    def buildTypes = android.buildTypes.collect { type -> type.name }
    def productFlavors = android.productFlavors.collect { flavor -> flavor.name }
    if (!productFlavors) productFlavors.add('')

    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->

            //Define the sourceName and the sourcePath.
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }

            def testTaskName = "test${sourceName.capitalize()}UnitTest"

            task "create${sourceName.capitalize()}UnitTestCoverageReport"(type: JacocoReport, dependsOn: "$testTaskName") {

                group = "Reporting"
                description =
                        "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                reports {
                    xml.enabled true
//                    removed for faster builds
                    html.enabled true
                }

                //Directory where the compiled class files are
                classDirectories =
                        fileTree(dir: "${project.buildDir}/intermediates/classes/${sourcePath}",
                                excludes: ['**/R.class',
                                           '**/BR.class',
                                           '**/R$*.class',
                                           '**/*$ViewInjector*.*',
                                           '**/*$ViewBinder*.*',
                                           '**/BuildConfig.*',
                                           'android/**',
                                           '**/Manifest*.*',
                                           '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
                                           '**/*Module.*', // Modules for Dagger.
                                           '**/*Dagger*.*', // Dagger auto-generated code.
                                           '**/*MembersInjector*.*', // Dagger auto-generated code.
                                           '**/*_Provide*Factory*.*',
                                           '**/*_Factory.*', //Dagger auto-generated code
                                           '**/*$*$*.*', // Anonymous classes generated by kotlin
                                           '**/*Activity.class' //exclude activities
                                ])

                sourceDirectories = files(["src/main/java",
                                           "src/main/kotlin",
                                           "src/$productFlavorName/java",
                                           "src/$productFlavorName/kotlin",
                                           "src/$buildTypeName/java",
                                           "src/$buildTypeName/kotlin"])

                executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")
            }
        }
    }
}